AWSTemplateFormatVersion: "2010-09-09"
Description: A template that creates vpcs, subnets, internet gateway, route tables security groups and EC2 instances.
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: Prod

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the third Availability Zone
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the third Availability Zone
    Type: String
    Default: 10.0.15.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the third Availability Zone
    Type: String
    Default: 10.0.51.0/24

  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the third Availability Zone
    Type: String
    Default: 10.0.59.0/24

  DestinationCidrBlock: 
    Description: Destination CidrBlock
    Type: String
    Default: 0.0.0.0/0

  SubnetAZ1:
    Type: String
    Default: "us-east-1a"
  SubnetAZ2:
    Type: String
    Default: "us-east-1b"
  SubnetAZ3:
    Type: String
    Default: "us-east-1c"

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  
  AmiId:
    Type:  String
    Default: ami-0ed294413f430a4c4

  DevBucketName: 
    Type: String
    Description: The name of the bucket.
    Default: mys3.dev.songyue.me

  ProdBucketName: 
    Type: String
    Description: The name of the bucket.
    Default: mys3.prod.songyue.me

  DBName:
    Description: The database name
    Type: String
    Default: csye6225

  DBUser:
    Description: The database admin account username
    Type: String
    Default: csye6225

  DBPassword:
    Description: The database admin account password
    Type: String
    Default: cheetos123456

  DBPort:
    Description: The database port
    Type: String
    Default: 3306

  ProdHostedZone:
    Description: The prod hosted zone
    Type: String
    Default: Z02743873E1XLAOJS8V46

  ProdDomainName:
    Description: The prod domain name
    Type: String
    Default: prod.songyue.me

    
# Resources
Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # Internet Gateway Attachments
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref SubnetAZ1
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref SubnetAZ2
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref SubnetAZ3
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ3)

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref SubnetAZ1
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref SubnetAZ2
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref SubnetAZ3
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ3)

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes


  # Public Routes
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref DestinationCidrBlock
      GatewayId: !Ref InternetGateway


  # Private Route Table Associations
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

# Public Route Table Associations
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  # Load Balancer Security Group
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: A security group for the load balancer to access the web application
      GroupName: load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: TCP
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Webapp SecurityGroup
  WebappSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: An EC2 security group for EC2 instances that will host web applications
        GroupName: application
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
          - IpProtocol: TCP
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - IpProtocol: TCP
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !Ref LBSecurityGroup
          - IpProtocol: TCP
            FromPort: 8080
            ToPort: 8080
            SourceSecurityGroupId: !Ref LBSecurityGroup
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !Ref LBSecurityGroup

  # Database SecurityGroup
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'DB security group'
      GroupName: database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebappSecurityGroup

  # S3 Bucket
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref ProdBucketName
      BucketEncryption:      
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: Rule for STANDARD prefix
            Prefix: STANDARD
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
            ExpirationInDays: 365

  # RDS Parameter Group
  MyRDSParamGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: mysql8.0
      Description: CloudFormation Database Parameter Group
      Parameters:
        sql_mode: IGNORE_SPACE

  # DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Private subnet for RDS instances
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3]

  # RDS Instance
  MyRDS:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '20'
      DBName: !Ref DBName
      StorageEncrypted: true
      KmsKeyId: !Ref RDSKey
      DBInstanceIdentifier: "csye6225"
      DBInstanceClass: db.t3.micro
      Engine: MySQL
      EngineVersion: 8.0.27
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBParameterGroupName: !Ref MyRDSParamGroup
      MultiAZ: false
      Port: !Ref DBPort
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      VPCSecurityGroups: 
          - !Ref DBSecurityGroup

  MyIAMProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: EC2-CSYE6225-instance-profile
      Path: /
      Roles: 
       - !Ref MyIAMRole

  MyIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "EC2-CSYE6225"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Description: Role to provide access to S3
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  # IAM Policy
  MyIAMPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: ['s3:PutObject*','s3:GetObject*','s3:ListObject*','s3:DeleteObject*']
            Resource: 
            - !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ProdBucketName
            - !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ProdBucketName
                - /*
      Roles:
        - !Ref MyIAMRole

  # Codedeploy IAM instance profile
  CodedeployIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: 'CodedeployIAMInstanceProfile'
      Path: /
      Roles: 
        - CodeDeployEC2ServiceRole

  # My Key
  kmsKey:  
    Type: "AWS::KMS::Key"
    Properties:
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-ebs
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::284018978494:user/webapp-user'
            Action: "kms:*"
            Resource: "*"
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::284018978494:root'
            Action: 'kms:*'
            Resource: '*'       
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::284018978494:role/CodeDeployEC2ServiceRole'
            Action: 'kms:*'
            Resource: '*'
            Condition: 
               Bool: 
                    "kms:GrantIsForAWSResource": true
          - Sid: Allow access through EBS for all principals in the account that are authorized to use EBS
            Effect: Allow
            Principal:   
              AWS: "*"  
            Action:
              - kms:Encrypt       
              - kms:Decrypt       
              - kms:ReEncrypt*       
              - kms:GenerateDataKey*       
              - kms:CreateGrant       
              - kms:DescribeKey       
            Resource: '*'
            Condition: 
                StringEquals:
                  "kms:CallerAccount": !Ref AWS::AccountId
                  "kms:ViaService": ec2.us-east-1.amazonaws.com  

  # Launch Template
  asgLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: asgLaunchTemplate
      LaunchTemplateData:
        BlockDeviceMappings:
          - Ebs:
              Encrypted: true
              KmsKeyId: !GetAtt kmsKey.Arn
              VolumeSize: 20
              VolumeType: "gp2"
              DeleteOnTermination: true
            DeviceName: /dev/xvda
        ImageId: !Ref AmiId
        SecurityGroupIds:
          - !Ref WebappSecurityGroup
        IamInstanceProfile: 
          Name: !Ref CodedeployIAMInstanceProfile
        InstanceType: !Ref InstanceType
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash 
              sudo yum update -y
              sudo chmod 777 /etc/profile
              echo 'export RDS_ENDPOINT="${MyRDS.Endpoint.Address}"' | sudo tee -a /etc/profile
              echo 'export DEV_BUCKET="${DevBucketName}"' | sudo tee -a /etc/profile
              echo 'export PROD_BUCKET="${ProdBucketName}"' | sudo tee -a /etc/profile
              echo 'export REGION="us-east-1"' | sudo tee -a /etc/profile
              source /etc/profile
              cd /home/ec2-user
              cd home/ec2-user
              sudo yum install -y ruby wget
              wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
              chmod +x ./install
              sudo ./install auto
              sudo service codedeploy-agent start
              sudo service codedeploy-agent status
              sudo amazon-cloudwatch-agent-ctl \
                  -a fetch-config \
                  -m ec2 \
                  -c file:/home/ec2-user/src/utils/cloudwatch-config.json \
                  -s
              sudo env PATH=$PATH:/home/ec2-user/.nvm/versions/node/v17.9.0/bin /home/ec2-user/.nvm/versions/node/v17.9.0/lib/node_modules/pm2/bin/pm2 start src/server.js -u ec2-user --hp /home/ec2-user
              sudo env PATH=$PATH:/home/ec2-user/.nvm/versions/node/v17.9.0/bin /home/ec2-user/.nvm/versions/node/v17.9.0/lib/node_modules/pm2/bin/pm2 startup systemd -u ec2-user --hp /home/ec2-user
              sudo env PATH=$PATH:/home/ec2-user/.nvm/versions/node/v17.9.0/bin /home/ec2-user/.nvm/versions/node/v17.9.0/lib/node_modules/pm2/bin/pm2 save -u ec2-user --hp /home/ec2-user
              sudo env PATH=$PATH:/home/ec2-user/.nvm/versions/node/v17.9.0/bin /home/ec2-user/.nvm/versions/node/v17.9.0/lib/node_modules/pm2/bin/pm2 status -u ec2-user --hp /home/ec2-user

  # Auto Scaling Group
  asgWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: [WebappLoadBalancer, loadBalancerTargetGroup, loadBalancerListener, HTTPSloadBalancerListener]
    Properties:
      Cooldown: 60
      LaunchTemplate:
        LaunchTemplateId: !Ref asgLaunchTemplate
        Version: !GetAtt asgLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 5
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref loadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"

  #Scaling Up Policy
  ScaleUpPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AdjustmentType: ChangeInCapacity
        AutoScalingGroupName: !Ref asgWebApp
        Cooldown: '60'
        ScalingAdjustment: 1

  # Scaling Down Policy
  ScaleDownPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AdjustmentType: ChangeInCapacity
        AutoScalingGroupName: !Ref asgWebApp
        Cooldown: '60'
        ScalingAdjustment: -1

  # CPU Alarm
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale up when CPU > 5% 
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 30
      EvaluationPeriods: 2
      Threshold: 5
      AlarmActions:
      - !Ref ScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref asgWebApp
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale down when CPU < 3%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 30
      EvaluationPeriods: 2
      Threshold: 3
      AlarmActions: 
        - !Ref ScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp
      ComparisonOperator: LessThanThreshold

  # Load Balancer
  WebappLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGatewayAttachment
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups: [!Ref LBSecurityGroup]
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application
      
  # loadBalancerCertificate:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
  #   Properties: 
  #     Certificates: 
  #       - CertificateArn: arn:aws:acm:us-east-1:284018978494:certificate/a60edcd8-fea9-4b88-a664-e38b1e213682
  #     ListenerArn: !GetAtt loadBalancerListener.Arn


  loadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/healthz'
      HealthCheckPort: '8080'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 8080
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalancerTargetGroup
      LoadBalancerArn: !Ref WebappLoadBalancer
      Port: 80
      Protocol: HTTP

  HTTPSloadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates: 
        - CertificateArn: arn:aws:acm:us-east-1:284018978494:certificate/a60edcd8-fea9-4b88-a664-e38b1e213682
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalancerTargetGroup
      LoadBalancerArn: !Ref WebappLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: "ELBSecurityPolicy-2016-08"

  

  # Route53 Record Set
  Route53Record:
    Type: AWS::Route53::RecordSetGroup
    Properties: 
      HostedZoneId: !Ref ProdHostedZone
      RecordSets: 
      - Name: "prod.songyue.me"
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'WebappLoadBalancer.CanonicalHostedZoneID'
          DNSName: !GetAtt 'WebappLoadBalancer.DNSName'



  # Codedeploy Deployment Group
  CodeDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      ApplicationName: csye6225-webapp
      AutoScalingGroups: 
        - !Ref asgWebApp
      AutoRollbackConfiguration: 
        Enabled: 'true'
        Events:
          - DEPLOYMENT_FAILURE
      DeploymentStyle: 
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      DeploymentGroupName: csye6225-webapp-deployment
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      Ec2TagFilters: 
        - Key: Application
          Value: WebApp
          Type: KEY_AND_VALUE
      ServiceRoleArn: arn:aws:iam::284018978494:role/CodeDeployServiceRole

  # Lambda Function
  # MyFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Description: Lambda function of nodejs14.x.
  #     Handler: index.handler
  #     Runtime: nodejs14.x
  #     Role: !Ref LambdaRole
  #     CodeUri: s3://codedeploy.prod.songyue.me/serverless.zip

  # # Lambda Permission
  # MyFunctionInvokePermission:
  #   Type: 'AWS::Lambda::Permission'
  #   Properties:
  #     Action: 'lambda:InvokeFunction'
  #     FunctionName: !Ref MyFunction
  #     Principal: sns.amazonaws.com   

  # Codedeploy Deployment Group for Lambda
  LambdaCodeDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      ApplicationName: serverless
      AutoRollbackConfiguration: 
        Enabled: 'true'
        Events:
          - DEPLOYMENT_FAILURE
      DeploymentStyle: 
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      DeploymentGroupName: serverless-deployment
      DeploymentConfigName: CodeDeployDefault.LambdaAllAtOnce
      ServiceRoleArn: arn:aws:iam::284018978494:role/LambdaRole

  # SNS
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "Verification"
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt MyFunction.Arn

  MyTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      Topics:
        - !Ref MySNSTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sns:Publish'
            Resource: !Ref MySNSTopic
            Principal:
              AWS: arn:aws:iam::284018978494:role/LambdaRole

  MyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "csye6225-lambda"
      Description: Lambda function of nodejs14.x.
      Handler: index.handler
      Runtime: nodejs14.x
      Role: arn:aws:iam::284018978494:role/LambdaRole
      Code: 
        ZipFile: |
          const AWS = require('aws-sdk');
          // Amazon SES configuration
          AWS.config.update({
            apiVersion: '2010-12-01',
            accessKeyId: '',
            secretAccessKey: '',
            region: 'us-east-1'
          });

          const ses = new AWS.SES();

          exports.handler = function(event, context, callback) {
              console.log("AWS lambda and SNS trigger ");
              const snsmessage = event.Records[0].Sns.Message;
              console.log('Message received from SNS:', snsmessage);
              const messageParams = JSON.parse(snsmessage);
              const email = messageParams.Item.username;
              const token = messageParams.Item.token;
              const link = `http://prod.songyue.me/v1/verifyUserEmail?email=${email}&token=${token}`;
              const emailParams = {
                  Destination: {
                    ToAddresses: [email],
                  },
                  Message: {
                    Subject: { Data: "Please Confirm your Email" },
                    Body: {
                      Html: { 
                          Charset: "UTF-8",
                          Data: `<html><body><a href="${link}">Click here to validate this email address.</a></body></html>`
                      }
                    }
                  },
                  Source: 'test@mail.prod.songyue.me'
              };
              ses.sendEmail(emailParams).promise().then((res,err) => {
                  if(err){
                    console.error(err);
                  }
                  else{
                    console.log("Successfully sent email!");
                  }
              });
          };
      
        
    # Lambda Permission
  MyFunctionInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref MyFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref MySNSTopic    


  # NewVolume:
  #   Type: AWS::EC2::Volume
  #   Properties: 
  #     Size: 100
  #     Encrypted: true
  #     AvailabilityZone: !GetAtt Ec2Instance.AvailabilityZone
  #     Tags:
  #       - Key: MyTag
  #         Value: TagValue
  #   DeletionPolicy: Snapshot

  # KMS RDS encryption key
  RDSKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-rds
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::284018978494:user/webapp-user'
            Action: 'kms:*'
            Resource: '*'



# Outputs
Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PublicSubnet3:
    Description: A reference to the public subnet in the 3rd Availability Zone
    Value: !Ref PublicSubnet3

  # InstanceId:
  #   Value: !Ref 'EC2Instance'
  #   Description: Instance Id of newly created instance

  # PublicServerDNS:
  #   Value: !GetAtt WebappLoadBalancer.PublicDnsName

  # AccessKeyformyaccesskey:
  #   Value: !Ref MyIAMaccesskey

  # SecretKeyformyaccesskey:
  #   Value: !GetAtt MyIAMaccesskey.SecretAccessKey
